--
-- Zen Ware's UI lib
-- written by: Venkopat
--

-- Constants
local ts = game:GetService("TweenService")
local textservice = game:GetService("TextService")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "UILIB"
ScreenGui.ResetOnSpawn = false

xpcall(function() ScreenGui.Parent = game:GetService("CoreGui") end,
       function() ScreenGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui end)

-- Tab
local Tab = {}
Tab.__index = Tab

-- Window
local Window = {}
Window.__index = Window

function Window.new(screengui, title)
	return Window.init(
		setmetatable({
			_tabCreated = {};
			_tabSelected = {};
			_selectedTab = nil;
			_tabs = {};
		}, Window)
		,screengui
		,title
	)
end

function Window:init(screengui, title)
	local background = Instance.new("Frame")
	background.Name = "Window"
	background.Size = UDim2.fromOffset(400, 250)
	background.BackgroundTransparency = 1
	background.Parent = screengui
	
	local backgroundLayout = Instance.new("UIListLayout")
	backgroundLayout.SortOrder = "LayoutOrder"
	backgroundLayout.Parent = background
	
	-- top
	local backgroundTop = Instance.new("Frame")
	backgroundTop.Size = UDim2.new(1, 0, 0, 30)
	backgroundTop.LayoutOrder = 0
	backgroundTop.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	backgroundTop.Parent = background
	
	local backgroundTopCorner = Instance.new("UICorner")
	backgroundTopCorner.CornerRadius = UDim.new(0, 10)
	backgroundTopCorner.Parent = backgroundTop
	
	local backgroundTopSquarify = Instance.new("Frame")
	backgroundTopSquarify.BackgroundColor3 = backgroundTop.BackgroundColor3
	backgroundTopSquarify.BorderSizePixel = 0
	backgroundTopSquarify.Size = UDim2.fromScale(1, 0.5)
	backgroundTopSquarify.Position = UDim2.fromScale(0, 0.5)
	backgroundTopSquarify.Parent = backgroundTop
	
	local backgroundTopBorder = Instance.new("Frame")
	backgroundTopBorder.AnchorPoint = Vector2.new(0, 1)
	backgroundTopBorder.Position = UDim2.fromScale(0, 1)
	backgroundTopBorder.Size = UDim2.new(1, 0, 0, 1)
	backgroundTopBorder.BorderSizePixel = 0
	backgroundTopBorder.BackgroundColor3 = Color3.fromRGB(42, 42, 42)
	backgroundTopBorder.Parent = backgroundTop
	
	local topTitle = Instance.new("TextLabel")
	topTitle.Text = title
	topTitle.Font = "Ubuntu"
	topTitle.TextSize = 14
	topTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	topTitle.Size = UDim2.fromScale(1, 1)
	topTitle.BackgroundTransparency = 1
	topTitle.TextXAlignment = "Left"
	topTitle.Parent = backgroundTop
	
	local topTitlePadding = Instance.new("UIPadding")
	topTitlePadding.PaddingLeft = UDim.new(0, 10)
	topTitlePadding.Parent = topTitle
	
	local topTabsContainer = Instance.new("Frame")
	topTabsContainer.Size = UDim2.fromScale(1, 1)
	topTabsContainer.BackgroundTransparency = 1
	topTabsContainer.Parent = backgroundTop
	
	local topTabsContainerLayout = Instance.new("UIListLayout")
	topTabsContainerLayout.FillDirection = "Horizontal"
	topTabsContainerLayout.HorizontalAlignment = "Right"
	topTabsContainerLayout.Parent = topTabsContainer
	
	local topTabsContainerPadding = Instance.new("UIPadding")
	topTabsContainerPadding.PaddingRight = UDim.new(0, 9)
	topTabsContainerPadding.Parent = topTabsContainer
	
	-- bottom
	local backgroundBottom = Instance.new("Frame")
	backgroundBottom.Size = UDim2.new(1, 0, 1, -30)
	backgroundBottom.LayoutOrder = 1
	backgroundBottom.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
	backgroundBottom.Parent = background
	
	local backgroundBottomCorner = Instance.new("UICorner")
	backgroundBottomCorner.CornerRadius = UDim.new(0, 10)
	backgroundBottomCorner.Parent = backgroundBottom
	
	local backgroundBottomSquarify = Instance.new("Frame")
	backgroundBottomSquarify.BackgroundColor3 = backgroundBottom.BackgroundColor3
	backgroundBottomSquarify.BorderSizePixel = 0
	backgroundBottomSquarify.Size = UDim2.fromScale(1, 0.5)
	backgroundBottomSquarify.Parent = backgroundBottom
	
	-- tabs functionality
	local selectFrame = Instance.new("Frame")
	selectFrame.BackgroundColor3 = Color3.fromRGB(100, 200, 250)
	selectFrame.Size = UDim2.fromOffset(0, 0)
	selectFrame.BorderSizePixel = 0
	selectFrame.Parent = backgroundTop
	
	local tabAnimationInfo = TweenInfo.new(0.2)
	
	function Tab:updateTextColor()
		if self.selected then return end
		if self.hovered then
			self.button.TextColor3 = Color3.fromRGB(120, 120, 120)
		else
			self.button.TextColor3 = Color3.fromRGB(85, 85, 85)
		end
	end
	
	function self._tabCreated.createButton(tab)
		local button = Instance.new("TextButton")
		button.BackgroundTransparency = 1
		button.Text = tab.name
		button.Font = "Ubuntu"
		button.TextSize = 14
		button.Size = UDim2.new(0, textservice:GetTextSize(tab.name, 14, Enum.Font.Ubuntu, Vector2.new(1000, 30)).X + 8, 1, 0)
		button.TextColor3 = Color3.fromRGB(85, 85, 85)
		button.Parent = topTabsContainer
		
		button.Activated:Connect(function()
			self:selectTab(tab.name)
		end)
		
		local function updateLineTween()
			if tab.lineTween then
				tab.lineTween:Destroy()
			end
			tab.lineTween = ts:Create(selectFrame, tabAnimationInfo, {
				Size = UDim2.fromOffset(button.AbsoluteSize.X, 2);
				Position = UDim2.fromOffset(button.AbsolutePosition.X, 0);
			})
		end
		
		updateLineTween()
		
		tab.updateLineTween = button:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateLineTween)
		
		tab.buttonTween = ts:Create(button, tabAnimationInfo, {
			TextColor3 = Color3.fromRGB(255, 255, 255);
		})
		
		tab.buttonUnselectTween = ts:Create(button, tabAnimationInfo, {
			TextColor3 = Color3.fromRGB(85, 85, 85);
		})
		
		tab.button = button
		
		button.MouseEnter:Connect(function()
			tab.hovered = true
			tab:updateTextColor()
		end)
		
		button.MouseLeave:Connect(function()
			tab.hovered = false
			tab:updateTextColor()
		end)
	end
	
	function self._tabSelected.animateButton(tab, oldtab)
		if oldtab then
			oldtab.buttonUnselectTween:Play()
		end
		tab.lineTween:Play()
		tab.buttonTween:Play()
	end
	
	return self
end

function Window:createTab(name)
	local tab = setmetatable({
		name = name;
	}, Tab)
	self._tabs[name] = tab
	
	for _, task in pairs(self._tabCreated) do
		task(tab)
	end
end

function Window:selectTab(name)
	local oldtab = self._selectedTab
	if oldtab then
		oldtab.selected = false
	end
	
	local tab = self._tabs[name]
	self._selectedTab = tab
	tab.selected = true
	
	for _, task in pairs(self._tabSelected) do
		task(tab, oldtab)
	end
end
